// Generated by CoffeeScript 1.6.3
(function() {
  var allFilesHaveReturned, allFilesHaveReturnedcount, count, eventDateFromString, events, fileReturned, html, noEvents, parseEvents, perEvent, postDayOfEvents, preDayOfEvents, realUpdateCalendar, updateCalendar, utils;

  preDayOfEvents = function(d) {
    return "<li class=\"date\">\n  <h2>" + (utils.formatDate(d, "%F %j, %Y")) + "</h2>\n  <ul id=\"" + (utils.formatDate(d, "%Y-%n-%j")) + "\">";
  };

  perEvent = function(event, id, t) {
    return "<li class=\"event\" id=\"" + id + "\">\n  <time>\n    <span class=\"hour\">" + t.start12Hour.getHours + "</span>\n    <span class=\"minute\">" + t.start12Hour.getMinutes + "</span>\n    <span class=\"daypart " + t.start12Hour.getPeriod + "\">" + t.start12Hour.getPeriod + "</span>\n  </time>\n  <span class=\"title\">" + event.title + "</span>\n  <span class=\"location\">" + event.location.address + "</span>\n</li>";
  };

  postDayOfEvents = function(d) {
    return "  </ul>\n</li>";
  };

  noEvents = function() {
    return "<h1>NO EVENTS!<span class=\"sad\">:_(</span>\n<p>Within the criteria, change the filter in settings, I don't know where it is either. :P</p>";
  };

  eventDateFromString = function(dateString) {
    var d, date;
    d = new Date();
    date = dateString.split('.');
    d.setDate(parseInt(date[0], 10));
    d.setMonth(parseInt(date[1], 10) - 1);
    d.setFullYear(parseInt(date[2], 10) + 2000);
    return d;
  };

  events = {
    ids: {},
    datesByName: {},
    events: {},
    dates: [],
    keys: []
  };

  html = "";

  fileReturned = function(filename, dayOfEvents) {
    var event, filenameDate, _i, _len;
    events.events[filename] = dayOfEvents;
    filenameDate = eventDateFromString(filename).getTime();
    events.dates.push({
      date: filenameDate,
      eventDay: filename
    });
    events.datesByName[filename] = filenameDate;
    events.keys.push(filename);
    for (_i = 0, _len = dayOfEvents.length; _i < _len; _i++) {
      event = dayOfEvents[_i];
      event.time = {};
      event.time.startTime = utils.timeFromString(event.startTime).getTime();
      event.time.endTime = utils.timeFromString(event.endTime).getTime();
    }
    return count++;
  };

  allFilesHaveReturned = function() {
    events.order = events.dates;
    events.order.sort(function(a, b) {
      return a.date - b.date;
    });
    allFilesHaveReturnedcount++;
    return parseEvents();
  };

  realUpdateCalendar = function(input) {
    var HTML;
    HTML = input || html;
    return document.querySelector("ul.events").innerHTML = HTML;
  };

  updateCalendar = function() {
    if (document.readyState === "loading") {
      return utils.attachToOnload(function() {
        return realUpdateCalendar();
      });
    } else {
      return realUpdateCalendar();
    }
  };

  parseEvents = function() {
    var T, d, day, dayDate, end12Hour, end24Hour, event, start12Hour, start24Hour, _day, _event, _i, _j, _ref, _ref1;
    if (events.keys[0] != null) {
      events.order.sort(function(a, b) {
        return a.date - b.date;
      });
      for (_day = _i = 0, _ref = events.order.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; _day = 0 <= _ref ? ++_i : --_i) {
        dayDate = events.order[_day];
        day = events.events[events.order[_day].eventDay];
        day.sort(function(a, b) {
          return a.time.startTime - b.time.startTime;
        });
        d = new Date(events.datesByName[dayDate.eventDay]);
        html += preDayOfEvents(d);
        for (_event = _j = 0, _ref1 = day.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; _event = 0 <= _ref1 ? ++_j : --_j) {
          event = day[_event];
          start24Hour = new Date(event.time.startTime);
          end24Hour = new Date(event.time.endTime);
          start12Hour = utils.timeTo12Hour(start24Hour, "0M");
          end12Hour = utils.timeTo12Hour(end24Hour, "0M");
          T = {
            start24Hour: start24Hour,
            end24Hour: end24Hour,
            start12Hour: start12Hour,
            end12Hour: end12Hour
          };
          html += perEvent(event, T);
        }
        html += postDayOfEvents(d);
      }
    } else {
      html = this.options.parsing.noEvents();
    }
    return updateCalendar();
  };

  count = 0;

  allFilesHaveReturnedcount = 0;

  utils = new Utils({
    dateRange: {
      from: [23, 10, 13],
      to: 4
    },
    dir: '/events/',
    whenFileReturns: function(filename, dayOfEvents) {
      return fileReturned(filename, dayOfEvents);
    },
    whenBatchReturns: function() {
      return allFilesHaveReturned();
    }
  });

  utils.init();

  window.utils = utils;

  window.updateCalendar = realUpdateCalendar;

  /*if document.readyState is "loading"
  	utils.attachToOnload ->
  		calendarElement = document.querySelector("ul.events")
  		console.log document.readyState
  		console.log calendarElement
  */


  /* extra advanced toys*/


  /*class setOptions
  	from: ->
  		res = @.value.split(',', 3).map(Number)
  		utils.options.dateRange.from = res
  	to: ->
  		res = parseInt(@.value, 10)
  		utils.options.dateRange.to = res
  */


  /*settingsPannel = ->
  	console.log "settingsPannel"
  	setOption = new setOptions()
  	element = document.getElementById "settings"
  	if element?
  		inputEle = element.querySelectorAll "input"
  		inputs = {}
  		# abstract elements and add listeners
  		for ele in [0..inputEle.length - 1]
  			inputs[inputEle[ele].name] = inputEle[ele]
  		console.log inputs
  		inputs.from.addEventListener "keyup", setOption.from, false
  		inputs.to.addEventListener "keyup", setOption.to, false
  		inputs.update.addEventListener "click", wgoat.run, false
  
  attachToOnload = (newFunction) ->
  	if typeof window.onload isnt "function"
  		window.onload = newFunction
  	else
  		oldOnLoad = window.onload
  		window.onload = ->
  			oldOnLoad() if oldOnLoad
  			newFunction()
  */


  /*if document.readyState is "interactive" || document.readyState is "complete"
  	settingsPannel()
  else
  	attachToOnload(settingsPannel)
  */


}).call(this);
